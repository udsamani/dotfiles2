resource "aws_wafregional_web_acl_association" "dataplane" {
  resource_arn = aws_lb.dataplane_public.arn
  web_acl_id   = aws_wafregional_web_acl.dataplane.id
}

resource "aws_wafregional_web_acl" "dataplane" {
  depends_on = [
    aws_wafregional_rule.identity_post_operation,
    aws_wafregional_rule.identity_get_operation
  ]
  name        = "dataplane-api"
  metric_name = "dataplaneapi"

  default_action {
    type = "BLOCK"
  }

  dynamic "rule" {
    for_each = aws_wafregional_rule.identity_post_operation.*.id
    content {
      action {
        type = "ALLOW"
      }
      priority = 1 + rule.key
      rule_id  = rule.value
      type     = "REGULAR"
    }
  }

  dynamic "rule" {
    for_each = aws_wafregional_rule.identity_get_operation.*.id
    content {
      action {
        type = "ALLOW"
      }
      priority = 1 + length(aws_wafregional_rule.identity_post_operation.*.id) + rule.key
      rule_id  = rule.value
      type     = "REGULAR"
    }
  }

  dynamic "rule" {
    for_each = aws_wafregional_rule.identity_options_operation.*.id
    content {
      action {
        type = "ALLOW"
      }
      priority = 1 + length(aws_wafregional_rule.identity_post_operation.*.id) + length(aws_wafregional_rule.identity_get_operation.*.id) + rule.key
      rule_id  = rule.value
      type     = "REGULAR"
    }
  }
}

resource "aws_wafregional_rule" "identity_post_operation" {
  count       = length(local.dataplane_whitelist_domains)
  name        = "post"
  metric_name = "post"

  predicate {
    data_id = aws_wafregional_byte_match_set.identity_post_uri.id
    negated = false
    type    = "ByteMatch"
  }

  predicate {
    data_id = aws_wafregional_byte_match_set.identity_post_method.id
    negated = false
    type    = "ByteMatch"
  }

  predicate {
    data_id = aws_wafregional_byte_match_set.identity_post_host[count.index].id
    negated = false
    type    = "ByteMatch"
  }
}

resource "aws_wafregional_rule" "identity_get_operation" {
  count       = length(local.dataplane_whitelist_domains)
  name        = "post"
  metric_name = "post"

  predicate {
    data_id = aws_wafregional_byte_match_set.identity_post_uri.id
    negated = false
    type    = "ByteMatch"
  }

  predicate {
    data_id = aws_wafregional_byte_match_set.identity_get_method.id
    negated = false
    type    = "ByteMatch"
  }

  predicate {
    data_id = aws_wafregional_byte_match_set.identity_post_host[count.index].id
    negated = false
    type    = "ByteMatch"
  }
}

resource "aws_wafregional_rule" "identity_options_operation" {
  count       = length(local.dataplane_whitelist_domains)
  name        = "post"
  metric_name = "post"

  predicate {
    data_id = aws_wafregional_byte_match_set.identity_post_uri.id
    negated = false
    type    = "ByteMatch"
  }

  predicate {
    data_id = aws_wafregional_byte_match_set.identity_options_method.id
    negated = false
    type    = "ByteMatch"
  }

  predicate {
    data_id = aws_wafregional_byte_match_set.identity_post_host[count.index].id
    negated = false
    type    = "ByteMatch"
  }
}

resource "aws_wafregional_byte_match_set" "identity_post_uri" {
  name = "identity_post_uri"

  byte_match_tuples {
    text_transformation   = "NONE"
    target_string         = "/v1/public/"
    positional_constraint = "CONTAINS"

    field_to_match {
      type = "URI"
    }
  }
}

resource "aws_wafregional_byte_match_set" "identity_post_host" {
  count = length(local.dataplane_whitelist_domains)
  name  = "identity_post_host"

  byte_match_tuples {
    text_transformation   = "NONE"
    target_string         = local.dataplane_whitelist_domains[count.index]
    positional_constraint = "EXACTLY"

    field_to_match {
      type = "HEADER"
      data = "host"
    }
  }
}

resource "aws_wafregional_byte_match_set" "identity_post_method" {
  name = "identity_post_method"
  byte_match_tuples {
    text_transformation   = "NONE"
    target_string         = "POST"
    positional_constraint = "EXACTLY"
    field_to_match {
      type = "METHOD"
    }
  }
}

resource "aws_wafregional_byte_match_set" "identity_get_method" {
  name = "identity_post_method"
  byte_match_tuples {
    text_transformation   = "NONE"
    target_string         = "GET"
    positional_constraint = "EXACTLY"
    field_to_match {
      type = "METHOD"
    }
  }
}

resource "aws_wafregional_byte_match_set" "identity_options_method" {
  name = "identity_options_method"
  byte_match_tuples {
    text_transformation   = "NONE"
    target_string         = "OPTIONS"
    positional_constraint = "EXACTLY"
    field_to_match {
      type = "METHOD"
    }
  }
}
